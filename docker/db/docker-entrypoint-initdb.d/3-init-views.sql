CREATE ALGORITHM=UNDEFINED SQL SECURITY DEFINER VIEW `uv_matches` AS select `m`.`id` AS `id`,`mc`.`completed` AS `completed`,`mc`.`pot_valid` AS `pot_valid`,cast(`e`.`date_time` as date) AS `date`,`e`.`name` AS `event`,`t`.`name` AS `title`,`mt`.`name` AS `match_type`,`m`.`match_note` AS `match_note`,`mc`.`contestants` AS `contestants`,`m`.`team_won` AS `team_won`,`mc`.`contestants_won` AS `contestants_won`,`mc`.`contestants_lost` AS `contestants_lost`,`m`.`winner_note` AS `winner_note`,`m`.`bet_open` AS `bet_open`,`mc`.`bet_multiplier` AS `bet_multiplier`,`mc`.`base_loser_pot` AS `base_loser_pot`,`mc`.`base_winner_pot` AS `base_winner_pot`,`mc`.`base_pot` AS `base_pot`,`mc`.`base_pot` + (`mc`.`base_pot` * `mc`.`bet_multiplier`) AS `total_pot`,`mc`.`user_bet_cnt` AS `user_bet_cnt`,`mc`.`user_bet_loser_cnt` AS `user_bet_loser_cnt`,`mc`.`user_bet_winner_cnt` AS `user_bet_winner_cnt`,`mc`.`user_rating_avg` AS `user_rating_avg`,`mc`.`user_rating_cnt` AS `user_rating_cnt`,`m`.`event_id` AS `event_id`,`m`.`title_id` AS `title_id`,`m`.`match_type_id` AS `match_type_id`,`m`.`last_updated` AS `info_last_updated`,`m`.`last_updated_by` AS `info_last_updated_by_id`,`u`.`username` AS `info_last_updated_by_username`,`mc`.`last_updated` AS `calc_last_updated` from (((((`matches_match` `m` left join `matches_event` `e` on(`e`.`id` = `m`.`event_id`)) left join `matches_title` `t` on(`t`.`id` = `m`.`title_id`)) left join `matches_match_type` `mt` on(`mt`.`id` = `m`.`match_type_id`)) left join `matches_match_calculation` `mc` on(`mc`.`match_id` = `m`.`id`)) left join `user` `u` on(`u`.`id` = `m`.`last_updated_by`));

CREATE ALGORITHM=UNDEFINED SQL SECURITY DEFINER VIEW `uv_matches_all_bets` AS select `matches_match`.`id` AS `id`,ifnull(`matches_contestant`.`bet_multiplier`,0) AS `bet_multiplier`,ifnull(sum(if(`matches_match`.`team_won` <> `matches_bet`.`team`,`matches_bet`.`points`,0)),0) AS `base_loser_pot`,ifnull(sum(if(`matches_match`.`team_won` = `matches_bet`.`team`,`matches_bet`.`points`,0)),0) AS `base_winner_pot`,ifnull(sum(`matches_bet`.`points`),0) AS `base_pot`,ifnull(sum(`matches_bet`.`points`),0) + (ifnull(sum(`matches_bet`.`points`),0) * ifnull(`matches_contestant`.`bet_multiplier`,0)) AS `total_pot`,ifnull(sum(if(`matches_match`.`team_won` <> `matches_bet`.`team`,1,0)),0) AS `loser_bet_cnt`,ifnull(sum(if(`matches_match`.`team_won` = `matches_bet`.`team`,1,0)),0) AS `winner_bet_cnt`,ifnull(sum(if(`matches_bet`.`team`,1,0)),0) AS `bet_cnt` from ((`matches_match` left join `matches_bet` on(`matches_bet`.`match_id` = `matches_match`.`id`)) left join `matches_contestant` on(`matches_contestant`.`match_id` = `matches_match`.`id` and `matches_contestant`.`team` = `matches_match`.`team_won`)) group by `matches_match`.`id` order by ifnull(sum(`matches_bet`.`points`),0) * ifnull(`matches_contestant`.`bet_multiplier`,1) desc,ifnull(sum(`matches_bet`.`points`),0) desc,count(0) desc;

CREATE ALGORITHM=UNDEFINED SQL SECURITY DEFINER VIEW `uv_matches_last_updated_by` AS select `user`.`id` AS `user_id`,`user`.`username` AS `last_updated_by`,count(`matches_match`.`last_updated_by`) AS `match_cnt`,min(`matches_match`.`id`) AS `min_match_id`,min(`matches_match`.`last_updated`) AS `min_dt`,max(`matches_match`.`id`) AS `max_match_id`,max(`matches_match`.`last_updated`) AS `max_dt` from (`matches_match` join `user` on(`matches_match`.`last_updated_by` = `user`.`id`)) group by `matches_match`.`last_updated_by`;

CREATE ALGORITHM=UNDEFINED SQL SECURITY DEFINER VIEW `uv_matches_match_calculation` AS select `m`.`id` AS `id`,group_concat(distinct `s`.`name` separator '; ') AS `contestants`,group_concat(distinct if(`mc`.`team` = `m`.`team_won`,`s`.`name`,NULL) separator '; ') AS `contestants_won`,group_concat(distinct if(`mc`.`team` <> `m`.`team_won`,`s`.`name`,NULL) separator '; ') AS `contestants_lost`,ifnull(`wc`.`bet_multiplier`,0) AS `bet_multiplier`,ifnull(sum(`ub`.`points`),0) AS `base_pot`,ifnull(sum(if(`ub`.`team` = `m`.`team_won`,`ub`.`points`,0)),0) AS `base_winner_pot`,ifnull(sum(if(`ub`.`team` <> `m`.`team_won`,`ub`.`points`,0)),0) AS `base_loser_pot`,count(distinct `ub`.`user_id`) AS `user_bet_cnt`,count(distinct case when `ub`.`team` = `m`.`team_won` then `ub`.`user_id` end) AS `user_bet_winner_cnt`,count(distinct case when `ub`.`team` <> `m`.`team_won` then `ub`.`user_id` end) AS `user_bet_loser_cnt`,ifnull(avg(`umr`.`rating`),0) AS `user_rating_avg`,count(distinct `umr`.`user_id`) AS `user_rating_cnt` from (((((`matches_match` `m` left join `matches_contestant` `mc` on(`mc`.`match_id` = `m`.`id`)) left join `matches_superstar` `s` on(`s`.`id` = `mc`.`superstar_id`)) left join `matches_bet` `ub` on(`ub`.`match_id` = `m`.`id`)) left join `matches_match_rating` `umr` on(`umr`.`match_id` = `m`.`id`)) left join `matches_contestant` `wc` on(`wc`.`match_id` = `m`.`id` and `wc`.`team` = `m`.`team_won`)) group by `m`.`id`;

CREATE ALGORITHM=UNDEFINED SQL SECURITY DEFINER VIEW `uv_matches_match_detail` AS select `m`.`id` AS `id`,`m`.`event_id` AS `event_id`,`m`.`title_id` AS `title_id`,`m`.`match_type_id` AS `match_type_id`,`m`.`match_note` AS `match_note`,`m`.`team_won` AS `team_won`,`m`.`winner_note` AS `winner_note`,`m`.`bet_open` AS `bet_open`,`m`.`last_updated_by` AS `info_last_updated_by_id`,`m`.`last_updated` AS `info_last_updated`,`mc`.`completed` AS `completed`,`mc`.`pot_valid` AS `pot_valid`,`mc`.`contestants` AS `contestants`,`mc`.`contestants_won` AS `contestants_won`,`mc`.`contestants_lost` AS `contestants_lost`,`mc`.`bet_multiplier` AS `bet_multiplier`,`mc`.`base_pot` AS `base_pot`,CAST(`mc`.`base_pot` + (`mc`.`base_pot` * `mc`.`bet_multiplier`) AS UNSIGNED) AS `total_pot`,`mc`.`base_winner_pot` AS `base_winner_pot`,`mc`.`base_loser_pot` AS `base_loser_pot`,`mc`.`user_bet_cnt` AS `user_bet_cnt`,`mc`.`user_bet_winner_cnt` AS `user_bet_winner_cnt`,`mc`.`user_bet_loser_cnt` AS `user_bet_loser_cnt`,`mc`.`user_rating_avg` AS `user_rating_avg`,`mc`.`user_rating_cnt` AS `user_rating_cnt`,`mc`.`last_updated` AS `calc_last_updated`,`e`.`name` AS `event`,cast(`e`.`date_time` as date) AS `date`,`t`.`name` AS `title`,`mt`.`name` AS `match_type`,`u`.`username` AS `last_updated_by_username` from (((((`matches_match` `m` left join `matches_event` `e` on(`e`.`id` = `m`.`event_id`)) left join `matches_title` `t` on(`t`.`id` = `m`.`title_id`)) left join `matches_match_type` `mt` on(`mt`.`id` = `m`.`match_type_id`)) left join `matches_match_calculation` `mc` on(`mc`.`match_id` = `m`.`id`)) left join `user` `u` on(`u`.`id` = `m`.`last_updated_by`));

CREATE ALGORITHM=UNDEFINED SQL SECURITY DEFINER VIEW `uv_matches_match_rating` AS select `matches_match`.`id` AS `id`,ifnull(avg(nullif(`matches_match_rating`.`rating`,0)),0) AS `user_rating_avg`,count(0) AS `user_rating_cnt` from (`matches_match` left join `matches_match_rating` on(`matches_match_rating`.`match_id` = `matches_match`.`id`)) group by `matches_match`.`id` order by ifnull(avg(nullif(`matches_match_rating`.`rating`,0)),0) desc,count(0) desc;

CREATE ALGORITHM=UNDEFINED SQL SECURITY DEFINER VIEW `uv_matches_all` AS select `matches_match`.`id` AS `id`,`matches_match`.`event_id` AS `event_id`,cast(`matches_event`.`date_time` as date) AS `date`,`matches_event`.`name` AS `event`,`matches_match`.`title_id` AS `title_id`,`matches_title`.`name` AS `title`,`matches_match`.`match_type_id` AS `match_type_id`,`matches_match_type`.`name` AS `match_type`,`matches_match`.`match_note` AS `match_note`,group_concat(`matches_superstar`.`name` separator '; ') AS `superstars`,`matches_match`.`team_won` AS `team_won`,`matches_match`.`winner_note` AS `winner_note`,`matches_match`.`bet_open` AS `bet_open`,`matches_match`.`last_updated` AS `last_updated`,`matches_match`.`last_updated_by` AS `last_updated_by`,`uv_matches_match_rating`.`user_rating_avg` AS `user_rating_avg` from ((((((`matches_match` left join `matches_event` on(`matches_event`.`id` = `matches_match`.`event_id`)) left join `uv_matches_match_rating` on(`uv_matches_match_rating`.`id` = `matches_match`.`id`)) left join `matches_title` on(`matches_title`.`id` = `matches_match`.`title_id`)) left join `matches_match_type` on(`matches_match_type`.`id` = `matches_match`.`match_type_id`)) left join `matches_contestant` on(`matches_match`.`id` = `matches_contestant`.`match_id`)) left join `matches_superstar` on(`matches_contestant`.`superstar_id` = `matches_superstar`.`id`)) group by `matches_match`.`id` order by `matches_match`.`bet_open` desc,`matches_event`.`date_time` desc,`matches_match`.`event_id` desc,`matches_match`.`title_id` = 0,`matches_match`.`title_id`;

CREATE ALGORITHM=UNDEFINED SQL SECURITY DEFINER VIEW `uv_matches_royalrumble` AS select `matches_royalrumble`.`id` AS `royalrumble_id`,`matches_event`.`date_time` AS `event_dt`,concat(year(`matches_event`.`date_time`),' ',`matches_event`.`name`) AS `event_name`,`matches_royalrumble`.`description` AS `description`,`matches_royalrumble`.`entry_max` AS `entry_max`,`matches_royalrumble`.`entry_won` AS `entry_won`,`matches_royalrumble_entry`.`user_id` AS `user_id`,ifnull(`user`.`username`,`matches_royalrumble_entry`.`display_name`) AS `display_name`,`matches_royalrumble_entry`.`entry` AS `entry`,`matches_royalrumble_entry`.`comment` AS `comment`,`matches_royalrumble_entry`.`created` AS `entered`,if(`matches_royalrumble`.`entry_won` = `matches_royalrumble_entry`.`entry` and `matches_royalrumble`.`id` = `matches_royalrumble_entry`.`royalrumble_id`,1,0) AS `winner` from (((`matches_royalrumble` left join `matches_event` on(`matches_event`.`id` = `matches_royalrumble`.`event_id`)) left join `matches_royalrumble_entry` on(`matches_royalrumble_entry`.`royalrumble_id` = `matches_royalrumble`.`id`)) left join `user` on(`user`.`id` = `matches_royalrumble_entry`.`user_id`)) order by `matches_event`.`date_time` desc,`matches_royalrumble`.`id` desc,`matches_royalrumble_entry`.`entry`,`matches_royalrumble_entry`.`created`;

CREATE ALGORITHM=UNDEFINED SQL SECURITY DEFINER VIEW `uv_matches_season_rating` AS select `umr`.`user_id` AS `user_id`,`ms`.`season` AS `season`,count(`umr`.`match_id`) AS `rating_cnt` from (`matches_match_rating` `umr` join `matches_season` `ms` on(`umr`.`match_id` between `ms`.`start_matchid` and ifnull(`ms`.`end_matchid`,`umr`.`match_id`))) group by `umr`.`user_id`,`ms`.`season`;

CREATE ALGORITHM=UNDEFINED SQL SECURITY DEFINER VIEW `uv_matches_stats_calc_s1` AS select `user`.`id` AS `user_id`,`ms`.`season` AS `season`,sum(if(`ubc`.`bet_won`,1,0)) AS `wins`,sum(if(`ubc`.`bet_won` = 0 and `mc`.`pot_valid` <> 0,1,0)) AS `losses`,ifnull(`umr`.`rating_cnt`,0) AS `ratings`,0 AS `rating_points`,(to_days(`ms`.`end_date`) - to_days(`user`.`date_created`)) * 20 AS `daily_points`,sum(if(`ubc`.`bet_won`,`ubc`.`potential_cut_points`,if(`mc`.`pot_valid`,-`ubc`.`points`,0))) AS `bet_points`,ifnull(sum(if(`ubc`.`bet_won`,`ubc`.`potential_cut_points`,if(`mc`.`pot_valid`,-`ubc`.`points`,0))),0) + 100 + (select `daily_points`) AS `total_points`,ifnull(sum(if(`ubc`.`bet_won`,`ubc`.`potential_cut_points`,if(`mc`.`pot_valid` <> 0 or `m`.`team_won` = 0,-`ubc`.`points`,0))),0) + 100 + (select `daily_points`) AS `available_points` from (((((`user` left join `matches_season` `ms` on(`ms`.`season` = 1)) left join `matches_bet_calculation` `ubc` on(`ubc`.`user_id` = `user`.`id` and `ubc`.`match_id` between `ms`.`start_matchid` and `ms`.`end_matchid`)) left join `matches_match_calculation` `mc` on(`mc`.`match_id` = `ubc`.`match_id`)) left join `matches_match` `m` on(`m`.`id` = `ubc`.`match_id`)) left join `uv_matches_season_rating` `umr` on(`umr`.`user_id` = `user`.`id` and `umr`.`season` = `ms`.`season`)) where `user`.`date_created` < `ms`.`end_date` + interval 1 day group by `user`.`id`;

CREATE ALGORITHM=UNDEFINED SQL SECURITY DEFINER VIEW `uv_matches_stats_calc_s2` AS select `user`.`id` AS `user_id`,`ms`.`season` AS `season`,sum(if(`ubc`.`bet_won`,1,0)) AS `wins`,sum(if(`ubc`.`bet_won` = 0 and `mc`.`pot_valid` <> 0 and `mc`.`completed` <> 0,1,0)) AS `losses`,ifnull(`umr`.`rating_cnt`,0) AS `ratings`,0 AS `rating_points`,(to_days(`ms`.`end_date`) - to_days(`user`.`date_created`)) * 20 AS `daily_points`,sum(if(`ubc`.`bet_won`,`ubc`.`potential_cut_points`,if(`mc`.`pot_valid`,-`ubc`.`points`,0))) AS `bet_points`,ifnull(sum(case when `ubc`.`bet_won` then `ubc`.`potential_cut_points` when `mc`.`pot_valid` <> 0 and `mc`.`completed` <> 0 and `ubc`.`bet_won` = 0 then -`ubc`.`points` end),0) + 100 + (select `daily_points`) AS `total_points`,ifnull(sum(case when `ubc`.`bet_won` then `ubc`.`potential_cut_points` when `mc`.`pot_valid` = 1 then -`ubc`.`points` end),0) + 100 + (select `daily_points`) AS `available_points` from ((((`user` left join `matches_season` `ms` on(`ms`.`season` = 2)) left join `matches_bet_calculation` `ubc` on(`ubc`.`user_id` = `user`.`id` and `ubc`.`match_id` between `ms`.`start_matchid` and `ms`.`end_matchid`)) left join `matches_match_calculation` `mc` on(`mc`.`match_id` = `ubc`.`match_id`)) left join `uv_matches_season_rating` `umr` on(`umr`.`user_id` = `user`.`id` and `umr`.`season` = `ms`.`season`)) where `user`.`date_created` < `ms`.`end_date` + interval 1 day group by `user`.`id`;

CREATE ALGORITHM=UNDEFINED SQL SECURITY DEFINER VIEW `uv_matches_stats_calc_s3` AS select `user`.`id` AS `user_id`,`ms`.`season` AS `season`,sum(if(`ubc`.`bet_won`,1,0)) AS `wins`,sum(if(`ubc`.`bet_won` = 0 and `mc`.`pot_valid` <> 0 and `mc`.`completed` <> 0,1,0)) AS `losses`,ifnull(`umr`.`rating_cnt`,0) AS `ratings`,(select `ratings`) * 50 AS `rating_points`,(to_days(if(current_timestamp() < `ms`.`end_date`,current_timestamp(),`ms`.`end_date`)) - to_days(`ms`.`start_date`)) * 20 AS `daily_points`,sum(if(`ubc`.`bet_won`,`ubc`.`potential_cut_points`,if(`mc`.`pot_valid`,-`ubc`.`points`,0))) AS `bet_points`,ifnull(sum(case when `ubc`.`bet_won` then `ubc`.`potential_cut_points` when `mc`.`pot_valid` <> 0 and `mc`.`completed` <> 0 and `ubc`.`bet_won` = 0 then -`ubc`.`points` end),0) + 100 + (select `daily_points`) + (select `rating_points`) AS `total_points`,ifnull(sum(case when `ubc`.`bet_won` then `ubc`.`potential_cut_points` when `mc`.`pot_valid` = 1 then -`ubc`.`points` end),0) + 100 + (select `daily_points`) + (select `rating_points`) AS `available_points` from ((((`user` left join `matches_season` `ms` on(`ms`.`season` = 3)) left join `matches_bet_calculation` `ubc` on(`ubc`.`user_id` = `user`.`id` and `ubc`.`match_id` between `ms`.`start_matchid` and ifnull(`ms`.`end_matchid`,`ubc`.`match_id`))) left join `matches_match_calculation` `mc` on(`mc`.`match_id` = `ubc`.`match_id`)) left join `uv_matches_season_rating` `umr` on(`umr`.`user_id` = `user`.`id` and `umr`.`season` = `ms`.`season`)) where `user`.`date_created` < `ms`.`end_date` + interval 1 day group by `user`.`id`;

CREATE ALGORITHM=UNDEFINED SQL SECURITY DEFINER VIEW `uv_matches_stats_calc_s4` AS select `user`.`id` AS `user_id`,`ms`.`season` AS `season`,sum(if(`ubc`.`bet_won`,1,0)) AS `wins`,sum(if(`ubc`.`bet_won` = 0 and `mc`.`pot_valid` <> 0 and `mc`.`completed` <> 0,1,0)) AS `losses`,ifnull(`umr`.`rating_cnt`,0) AS `ratings`,(select `ratings`) * 50 AS `rating_points`,(to_days(if(current_timestamp() < `ms`.`end_date`,current_timestamp(),`ms`.`end_date`)) - to_days(`ms`.`start_date`)) * 20 AS `daily_points`,sum(if(`ubc`.`bet_won`,`ubc`.`potential_cut_points`,if(`mc`.`pot_valid`,-`ubc`.`points`,0))) AS `bet_points`,ifnull(sum(case when `ubc`.`bet_won` then `ubc`.`potential_cut_points` when `mc`.`pot_valid` <> 0 and `mc`.`completed` <> 0 and `ubc`.`bet_won` = 0 then -`ubc`.`points` end),0) + 100 + (select `daily_points`) + (select `rating_points`) AS `total_points`,ifnull(sum(case when `ubc`.`bet_won` then `ubc`.`potential_cut_points` when `mc`.`pot_valid` = 1 then -`ubc`.`points` end),0) + 100 + (select `daily_points`) + (select `rating_points`) AS `available_points` from ((((`user` left join `matches_season` `ms` on(`ms`.`season` = 4)) left join `matches_bet_calculation` `ubc` on(`ubc`.`user_id` = `user`.`id` and `ubc`.`match_id` between `ms`.`start_matchid` and ifnull(`ms`.`end_matchid`,`ubc`.`match_id`))) left join `matches_match_calculation` `mc` on(`mc`.`match_id` = `ubc`.`match_id`)) left join `uv_matches_season_rating` `umr` on(`umr`.`user_id` = `user`.`id` and `umr`.`season` = `ms`.`season`)) where `user`.`date_created` < `ms`.`end_date` + interval 1 day group by `user`.`id`;

CREATE ALGORITHM=UNDEFINED SQL SECURITY DEFINER VIEW `uv_matches_stats_calc_s5` AS select `user`.`id` AS `user_id`,`ms`.`season` AS `season`,sum(if(`ubc`.`bet_won`,1,0)) AS `wins`,sum(if(`ubc`.`bet_won` = 0 and `mc`.`pot_valid` <> 0 and `mc`.`completed` <> 0,1,0)) AS `losses`,ifnull(`umr`.`rating_cnt`,0) AS `ratings`,(select `ratings`) * 50 AS `rating_points`,(to_days(if(current_timestamp() < `ms`.`end_date`,current_timestamp(),`ms`.`end_date`)) - to_days(`ms`.`start_date`)) * 20 AS `daily_points`,sum(if(`ubc`.`bet_won`,`ubc`.`potential_cut_points`,if(`mc`.`pot_valid`,-`ubc`.`points`,0))) AS `bet_points`,ifnull(sum(case when `ubc`.`bet_won` then `ubc`.`potential_cut_points` when `mc`.`pot_valid` <> 0 and `mc`.`completed` <> 0 and `ubc`.`bet_won` = 0 then -`ubc`.`points` end),0) + 100 + (select `daily_points`) + (select `rating_points`) AS `total_points`,ifnull(sum(case when `ubc`.`bet_won` then `ubc`.`potential_cut_points` when `mc`.`pot_valid` = 1 then -`ubc`.`points` end),0) + 100 + (select `daily_points`) + (select `rating_points`) AS `available_points` from ((((`user` left join `matches_season` `ms` on(`ms`.`season` = 5)) left join `matches_bet_calculation` `ubc` on(`ubc`.`user_id` = `user`.`id` and `ubc`.`match_id` between `ms`.`start_matchid` and ifnull(`ms`.`end_matchid`,`ubc`.`match_id`))) left join `matches_match_calculation` `mc` on(`mc`.`match_id` = `ubc`.`match_id`)) left join `uv_matches_season_rating` `umr` on(`umr`.`user_id` = `user`.`id` and `umr`.`season` = `ms`.`season`)) where `user`.`date_created` < `ms`.`end_date` + interval 1 day group by `user`.`id`;

CREATE ALGORITHM=UNDEFINED SQL SECURITY DEFINER VIEW `uv_matches_stats_calc_s6` AS select `user`.`id` AS `user_id`,`ms`.`season` AS `season`,sum(if(`ubc`.`bet_won`,1,0)) AS `wins`,sum(if(`ubc`.`bet_won` = 0 and `mc`.`pot_valid` <> 0 and `mc`.`completed` <> 0,1,0)) AS `losses`,ifnull(`umr`.`rating_cnt`,0) AS `ratings`,(select `ratings`) * 50 AS `rating_points`,(to_days(if(current_timestamp() < `ms`.`end_date`,current_timestamp(),`ms`.`end_date`)) - to_days(`ms`.`start_date`)) * 20 AS `daily_points`,sum(if(`ubc`.`bet_won`,`ubc`.`potential_cut_points`,if(`mc`.`pot_valid`,-`ubc`.`points`,0))) AS `bet_points`,ifnull(sum(case when `ubc`.`bet_won` then `ubc`.`potential_cut_points` when `mc`.`pot_valid` <> 0 and `mc`.`completed` <> 0 and `ubc`.`bet_won` = 0 then -`ubc`.`points` end),0) + 100 + (select `daily_points`) + (select `rating_points`) AS `total_points`,ifnull(sum(case when `ubc`.`bet_won` then `ubc`.`potential_cut_points` when `mc`.`pot_valid` = 1 then -`ubc`.`points` end),0) + 100 + (select `daily_points`) + (select `rating_points`) AS `available_points` from ((((`user` left join `matches_season` `ms` on(`ms`.`season` = 6)) left join `matches_bet_calculation` `ubc` on(`ubc`.`user_id` = `user`.`id` and `ubc`.`match_id` between `ms`.`start_matchid` and ifnull(`ms`.`end_matchid`,`ubc`.`match_id`))) left join `matches_match_calculation` `mc` on(`mc`.`match_id` = `ubc`.`match_id`)) left join `uv_matches_season_rating` `umr` on(`umr`.`user_id` = `user`.`id` and `umr`.`season` = `ms`.`season`)) where `user`.`date_created` < `ms`.`end_date` + interval 1 day group by `user`.`id`;

CREATE ALGORITHM=UNDEFINED SQL SECURITY DEFINER VIEW `uv_matches_stats_calc_s7` AS select `user`.`id` AS `user_id`,`ms`.`season` AS `season`,sum(if(`ubc`.`bet_won`,1,0)) AS `wins`,sum(if(`ubc`.`bet_won` = 0 and `mc`.`pot_valid` <> 0 and `mc`.`completed` <> 0,1,0)) AS `losses`,ifnull(`umr`.`rating_cnt`,0) AS `ratings`,(select `ratings`) * 50 AS `rating_points`,(to_days(if(current_timestamp() < `ms`.`end_date`,current_timestamp(),`ms`.`end_date`)) - to_days(`ms`.`start_date`)) * 20 AS `daily_points`,sum(if(`ubc`.`bet_won`,`ubc`.`potential_cut_points`,if(`mc`.`pot_valid`,-`ubc`.`points`,0))) AS `bet_points`,ifnull(sum(case when `ubc`.`bet_won` then `ubc`.`potential_cut_points` when `mc`.`pot_valid` <> 0 and `mc`.`completed` <> 0 and `ubc`.`bet_won` = 0 then -`ubc`.`points` end),0) + 100 + (select `daily_points`) + (select `rating_points`) AS `total_points`,ifnull(sum(case when `ubc`.`bet_won` then `ubc`.`potential_cut_points` when `mc`.`pot_valid` = 1 then -`ubc`.`points` end),0) + 100 + (select `daily_points`) + (select `rating_points`) AS `available_points` from ((((`user` left join `matches_season` `ms` on(`ms`.`season` = 7)) left join `matches_bet_calculation` `ubc` on(`ubc`.`user_id` = `user`.`id` and `ubc`.`match_id` between `ms`.`start_matchid` and ifnull(`ms`.`end_matchid`,`ubc`.`match_id`))) left join `matches_match_calculation` `mc` on(`mc`.`match_id` = `ubc`.`match_id`)) left join `uv_matches_season_rating` `umr` on(`umr`.`user_id` = `user`.`id` and `umr`.`season` = `ms`.`season`)) where `user`.`date_created` < `ms`.`end_date` + interval 1 day group by `user`.`id`;

CREATE ALGORITHM=UNDEFINED SQL SECURITY DEFINER VIEW `uv_matches_stats` AS select `user`.`id` AS `user_id`,`user`.`username` AS `username`,`user`.`date_created` AS `date_created`,ifnull(`ufs`.`superstar_id`,1) AS `favorite_superstar_id`,`us1`.`wins` AS `s1_wins`,`us1`.`losses` AS `s1_losses`,`us1`.`ratings` AS `s1_ratings`,`us1`.`rating_points` AS `s1_rating_points`,`us1`.`daily_points` AS `s1_daily_points`,`us1`.`bet_points` AS `s1_bet_points`,`us1`.`total_points` AS `s1_total_points`,`us1`.`available_points` AS `s1_available_points`,`us2`.`wins` AS `s2_wins`,`us2`.`losses` AS `s2_losses`,`us2`.`ratings` AS `s2_ratings`,`us2`.`rating_points` AS `s2_rating_points`,`us2`.`daily_points` AS `s2_daily_points`,`us2`.`bet_points` AS `s2_bet_points`,`us2`.`total_points` AS `s2_total_points`,`us2`.`available_points` AS `s2_available_points`,`us3`.`wins` AS `s3_wins`,`us3`.`losses` AS `s3_losses`,`us3`.`ratings` AS `s3_ratings`,`us3`.`rating_points` AS `s3_rating_points`,`us3`.`daily_points` AS `s3_daily_points`,`us3`.`bet_points` AS `s3_bet_points`,`us3`.`total_points` AS `s3_total_points`,`us3`.`available_points` AS `s3_available_points`,`us4`.`wins` AS `s4_wins`,`us4`.`losses` AS `s4_losses`,`us4`.`ratings` AS `s4_ratings`,`us4`.`rating_points` AS `s4_rating_points`,`us4`.`daily_points` AS `s4_daily_points`,`us4`.`bet_points` AS `s4_bet_points`,`us4`.`total_points` AS `s4_total_points`,`us4`.`available_points` AS `s4_available_points`,`us5`.`wins` AS `s5_wins`,`us5`.`losses` AS `s5_losses`,`us5`.`ratings` AS `s5_ratings`,`us5`.`rating_points` AS `s5_rating_points`,`us5`.`daily_points` AS `s5_daily_points`,`us5`.`bet_points` AS `s5_bet_points`,`us5`.`total_points` AS `s5_total_points`,`us5`.`available_points` AS `s5_available_points`,`us6`.`wins` AS `s6_wins`,`us6`.`losses` AS `s6_losses`,`us6`.`ratings` AS `s6_ratings`,`us6`.`rating_points` AS `s6_rating_points`,`us6`.`daily_points` AS `s6_daily_points`,`us6`.`bet_points` AS `s6_bet_points`,`us6`.`total_points` AS `s6_total_points`,`us6`.`available_points` AS `s6_available_points`,`us7`.`wins` AS `s7_wins`,`us7`.`losses` AS `s7_losses`,`us7`.`ratings` AS `s7_ratings`,`us7`.`rating_points` AS `s7_rating_points`,`us7`.`daily_points` AS `s7_daily_points`,`us7`.`bet_points` AS `s7_bet_points`,`us7`.`total_points` AS `s7_total_points`,`us7`.`available_points` AS `s7_available_points`,ifnull(`us1`.`wins`,0) + ifnull(`us2`.`wins`,0) + ifnull(`us3`.`wins`,0) + ifnull(`us4`.`wins`,0) + ifnull(`us5`.`wins`,0) + ifnull(`us6`.`wins`,0) + ifnull(`us7`.`wins`,0) AS `total_wins`,ifnull(`us1`.`losses`,0) + ifnull(`us2`.`losses`,0) + ifnull(`us3`.`losses`,0) + ifnull(`us4`.`losses`,0) + ifnull(`us5`.`losses`,0) + ifnull(`us6`.`losses`,0) + ifnull(`us7`.`losses`,0) AS `total_losses`,ifnull(`us1`.`total_points`,0) + ifnull(`us2`.`total_points`,0) + ifnull(`us3`.`total_points`,0) + ifnull(`us4`.`total_points`,0) + ifnull(`us5`.`total_points`,0) + ifnull(`us6`.`total_points`,0) + ifnull(`us7`.`total_points`,0) AS `total_points` from ((((((((`user` left join `matches_favorite_superstar` `ufs` on(`user`.`id` = `ufs`.`user_id`)) left join `matches_stats` `us1` on(`us1`.`season` = 1 and `user`.`id` = `us1`.`user_id`)) left join `matches_stats` `us2` on(`us2`.`season` = 2 and `user`.`id` = `us2`.`user_id`)) left join `matches_stats` `us3` on(`us3`.`season` = 3 and `user`.`id` = `us3`.`user_id`)) left join `uv_matches_stats_calc_s4` `us4` on(`us4`.`season` = 4 and `user`.`id` = `us4`.`user_id`)) left join `uv_matches_stats_calc_s5` `us5` on(`us5`.`season` = 5 and `user`.`id` = `us5`.`user_id`)) left join `uv_matches_stats_calc_s6` `us6` on(`us6`.`season` = 6 and `user`.`id` = `us6`.`user_id`)) left join `uv_matches_stats_calc_s7` `us7` on(`us7`.`season` = 7 and `user`.`id` = `us7`.`user_id`)) group by `user`.`id`;

CREATE ALGORITHM=UNDEFINED SQL SECURITY DEFINER VIEW `uv_matches_stats_calc` AS select `user`.`id` AS `user_id`,`user`.`date_created` AS `date_created`,ifnull(`vus1`.`wins`,0) AS `s1_wins`,ifnull(`vus1`.`losses`,0) AS `s1_losses`,ifnull(`vus1`.`ratings`,0) AS `s1_ratings`,ifnull(`vus1`.`rating_points`,0) AS `s1_rating_points`,ifnull(`vus1`.`daily_points`,0) AS `s1_daily_points`,ifnull(`vus1`.`bet_points`,0) AS `s1_bet_points`,ifnull(`vus1`.`total_points`,0) AS `s1_total_points`,ifnull(`vus1`.`available_points`,0) AS `s1_available_points`,ifnull(`vus2`.`wins`,0) AS `s2_wins`,ifnull(`vus2`.`losses`,0) AS `s2_losses`,ifnull(`vus1`.`ratings`,0) AS `s2_ratings`,ifnull(`vus1`.`rating_points`,0) AS `s2_rating_points`,ifnull(`vus2`.`daily_points`,0) AS `s2_daily_points`,ifnull(`vus2`.`bet_points`,0) AS `s2_bet_points`,ifnull(`vus2`.`total_points`,0) AS `s2_total_points`,ifnull(`vus2`.`available_points`,0) AS `s2_available_points`,ifnull(`vus3`.`wins`,0) AS `s3_wins`,ifnull(`vus3`.`losses`,0) AS `s3_losses`,ifnull(`vus1`.`ratings`,0) AS `s3_ratings`,ifnull(`vus1`.`rating_points`,0) AS `s3_rating_points`,ifnull(`vus3`.`daily_points`,0) AS `s3_daily_points`,ifnull(`vus3`.`bet_points`,0) AS `s3_bet_points`,ifnull(`vus3`.`total_points`,0) AS `s3_total_points`,ifnull(`vus3`.`available_points`,0) AS `s3_available_points`,ifnull(`vus4`.`daily_points`,0) AS `s4_daily_points`,ifnull(`vus4`.`bet_points`,0) AS `s4_bet_points`,ifnull(`vus4`.`total_points`,0) AS `s4_total_points`,ifnull(`vus4`.`available_points`,0) AS `s4_available_points`,ifnull(`vus5`.`daily_points`,0) AS `s5_daily_points`,ifnull(`vus5`.`bet_points`,0) AS `s5_bet_points`,ifnull(`vus5`.`total_points`,0) AS `s5_total_points`,ifnull(`vus5`.`available_points`,0) AS `s5_available_points`,ifnull(`vus6`.`daily_points`,0) AS `s6_daily_points`,ifnull(`vus6`.`bet_points`,0) AS `s6_bet_points`,ifnull(`vus6`.`total_points`,0) AS `s6_total_points`,ifnull(`vus6`.`available_points`,0) AS `s6_available_points`,ifnull(`vus7`.`daily_points`,0) AS `s7_daily_points`,ifnull(`vus7`.`bet_points`,0) AS `s7_bet_points`,ifnull(`vus7`.`total_points`,0) AS `s7_total_points`,ifnull(`vus7`.`available_points`,0) AS `s7_available_points`,ifnull(`vus1`.`wins`,0) + ifnull(`vus2`.`wins`,0) + ifnull(`vus3`.`wins`,0) + ifnull(`vus4`.`wins`,0) + ifnull(`vus5`.`wins`,0) + ifnull(`vus6`.`wins`,0) + ifnull(`vus7`.`wins`,0) AS `total_wins`,ifnull(`vus1`.`losses`,0) + ifnull(`vus2`.`losses`,0) + ifnull(`vus3`.`losses`,0) + ifnull(`vus4`.`losses`,0) + ifnull(`vus5`.`losses`,0) + ifnull(`vus6`.`losses`,0) + ifnull(`vus7`.`losses`,0) AS `total_losses`,ifnull(`vus1`.`total_points`,0) + ifnull(`vus2`.`total_points`,0) + ifnull(`vus3`.`total_points`,0) + ifnull(`vus4`.`total_points`,0) + ifnull(`vus5`.`total_points`,0) + ifnull(`vus6`.`total_points`,0) + ifnull(`vus7`.`total_points`,0) AS `total_points` from (((((((`user` left join `uv_matches_stats_calc_s1` `vus1` on(`vus1`.`user_id` = `user`.`id`)) left join `uv_matches_stats_calc_s2` `vus2` on(`vus2`.`user_id` = `user`.`id`)) left join `uv_matches_stats_calc_s3` `vus3` on(`vus3`.`user_id` = `user`.`id`)) left join `uv_matches_stats_calc_s4` `vus4` on(`vus4`.`user_id` = `user`.`id`)) left join `uv_matches_stats_calc_s5` `vus5` on(`vus5`.`user_id` = `user`.`id`)) left join `uv_matches_stats_calc_s6` `vus6` on(`vus6`.`user_id` = `user`.`id`)) left join `uv_matches_stats_calc_s7` `vus7` on(`vus7`.`user_id` = `user`.`id`));

CREATE ALGORITHM=UNDEFINED SQL SECURITY DEFINER VIEW `uv_matches_user_bets` AS select `mb`.`user_id` AS `user_id`,`mb`.`match_id` AS `match_id`,`mb`.`points` AS `bet_amount`,`mb`.`team` AS `bet_team`,`mb`.`dt_placed` AS `bet_placed`,`mbc`.`bet_won` AS `bet_won`,`mbc`.`team_base_pot` AS `team_base_pot`,`mbc`.`potential_pot` AS `potential_pot`,`mbc`.`potential_cut_pct` AS `potential_cut_pct`,`mbc`.`potential_cut_points` AS `potential_cut_points`,`mmc`.`completed` AS `completed`,`mmc`.`pot_valid` AS `pot_valid`,`mmc`.`base_pot` AS `base_pot`,`mmc`.`bet_multiplier` AS `bet_multiplier`,CAST(`mmc`.`base_pot` + (`mmc`.`bet_multiplier` * `mmc`.`base_pot`) AS UNSIGNED) AS `total_pot`,`mmc`.`contestants` AS `contestants`,`mmc`.`contestants_won` AS `contestants_won`,`mmc`.`contestants_lost` AS `contestants_lost`,group_concat(`ms`.`name` separator '; ') AS `bet_on`,`me`.`name` AS `event_name`,`me`.`date_time` AS `event_dt` from ((((((`matches_bet` `mb` join `matches_bet_calculation` `mbc` on(`mbc`.`match_id` = `mb`.`match_id` and `mbc`.`user_id` = `mb`.`user_id`)) join `matches_match_calculation` `mmc` on(`mmc`.`match_id` = `mbc`.`match_id`)) join `matches_contestant` `mc` on(`mc`.`match_id` = `mb`.`match_id` and `mc`.`team` = `mb`.`team`)) join `matches_superstar` `ms` on(`ms`.`id` = `mc`.`superstar_id`)) join `matches_match` `mm` on(`mm`.`id` = `mb`.`match_id`)) join `matches_event` `me` on(`me`.`id` = `mm`.`event_id`)) group by `mc`.`team`,`mb`.`match_id`,`mb`.`user_id`;

CREATE ALGORITHM=UNDEFINED SQL SECURITY DEFINER VIEW `uv_poll_active` AS select `BIN_TO_UUID`(`poll_topic`.`id`) AS `id`,`poll_topic`.`content` AS `content`,`poll_topic`.`allow_multi` AS `allow_multi`,`poll_topic`.`hide_votes` AS `hide_votes`,`poll_topic`.`user_id` AS `user_id`,`user`.`username` AS `username`,`poll_topic`.`votes` AS `votes`,`poll_topic`.`expire_dt` AS `expire_dt`,`poll_topic`.`created_dt` AS `created_dt`,timestampdiff(SECOND,current_timestamp(),`poll_topic`.`expire_dt`) AS `ending_in`,`poll_topic`.`admin_hide` AS `admin_hide` from (`poll_topic` left join `user` on(`poll_topic`.`user_id` = `user`.`id`)) where `poll_topic`.`expire_dt` > current_timestamp() and `poll_topic`.`admin_hide` = 0;

CREATE ALGORITHM=UNDEFINED SQL SECURITY DEFINER VIEW `uv_poll_expired` AS select `BIN_TO_UUID`(`poll_topic`.`id`) AS `id`,`poll_topic`.`content` AS `content`,`poll_topic`.`allow_multi` AS `allow_multi`,`poll_topic`.`hide_votes` AS `hide_votes`,`poll_topic`.`user_id` AS `user_id`,`user`.`username` AS `username`,`poll_topic`.`votes` AS `votes`,`poll_topic`.`expire_dt` AS `expire_dt`,`poll_topic`.`created_dt` AS `created_dt`,timestampdiff(SECOND,current_timestamp(),`poll_topic`.`expire_dt`) AS `ending_in`,`poll_topic`.`admin_hide` AS `admin_hide` from (`poll_topic` left join `user` on(`poll_topic`.`user_id` = `user`.`id`)) where `poll_topic`.`expire_dt` < current_timestamp() and `poll_topic`.`admin_hide` = 0;

CREATE ALGORITHM=UNDEFINED SQL SECURITY DEFINER VIEW `uv_poll_info` AS select `BIN_TO_UUID`(`poll_topic`.`id`) AS `id`,`poll_topic`.`content` AS `content`,`poll_topic`.`allow_multi` AS `allow_multi`,`poll_topic`.`hide_votes` AS `hide_votes`,`poll_topic`.`user_id` AS `user_id`,ifnull(`user`.`username`,'Unregistered User') AS `username`,`poll_topic`.`votes` AS `votes`,`poll_topic`.`expire_dt` AS `expire_dt`,`poll_topic`.`created_dt` AS `created_dt`,timestampdiff(SECOND,current_timestamp(),`poll_topic`.`expire_dt`) AS `ending_in`,`poll_topic`.`admin_hide` AS `admin_hide` from (`poll_topic` left join `user` on(`user`.`id` = `poll_topic`.`user_id`));

CREATE ALGORITHM=UNDEFINED SQL SECURITY DEFINER VIEW `uv_table_size_on_disk` AS select `information_schema`.`TABLES`.`TABLE_SCHEMA` AS `Database`,`information_schema`.`TABLES`.`TABLE_NAME` AS `Table`,round((`information_schema`.`TABLES`.`DATA_LENGTH` + `information_schema`.`TABLES`.`INDEX_LENGTH`) / 1024 / 1024,0) AS `Size (MB)` from `information_schema`.`TABLES` order by `information_schema`.`TABLES`.`DATA_LENGTH` + `information_schema`.`TABLES`.`INDEX_LENGTH` desc;

CREATE ALGORITHM=UNDEFINED SQL SECURITY DEFINER VIEW `uv_traffic` AS select `traffic`.`created` AS `created`,`traffic_domain`.`domain` AS `domain`,`traffic`.`response_code` AS `response_code`,`traffic_request`.`request` AS `request`,`traffic`.`user_id` AS `auth_user_id`,`user`.`username` AS `auth_user_username`,inet6_ntoa(`traffic_ip`.`ip`) AS `inet6_ntoa(traffic_ip.ip)`,`traffic_user_agent`.`user_agent` AS `user_agent` from (((((`traffic` left join `traffic_request` on(`traffic`.`request_id` = `traffic_request`.`id`)) left join `traffic_domain` on(`traffic`.`domain_id` = `traffic_domain`.`id`)) left join `traffic_user_agent` on(`traffic`.`user_agent_id` = `traffic_user_agent`.`id`)) left join `traffic_ip` on(`traffic`.`ip_id` = `traffic_ip`.`id`)) left join `user` on(`traffic`.`user_id` = `user`.`id`));

CREATE ALGORITHM=UNDEFINED SQL SECURITY DEFINER VIEW `uv_traffic_general_daily` AS select `traffic_domain`.`domain` AS `domain`,count(`traffic`.`id`) AS `total_traffic`,count(distinct `traffic`.`ip_id`) AS `unique_ips`,cast(`traffic`.`created` as date) AS `date` from (`traffic` join `traffic_domain` on(`traffic_domain`.`id` = `traffic`.`domain_id`)) group by cast(`traffic`.`created` as date),`traffic_domain`.`domain` order by cast(`traffic`.`created` as date) desc;

CREATE ALGORITHM=UNDEFINED SQL SECURITY DEFINER VIEW `uv_traffic_ip_daily` AS select inet6_ntoa(`traffic_ip`.`ip`) AS `ip`,count(`traffic`.`ip_id`) AS `total_hits`,cast(`traffic`.`created` as date) AS `date` from (`traffic` join `traffic_ip` on(`traffic_ip`.`id` = `traffic`.`ip_id`)) group by cast(`traffic`.`created` as date),`traffic`.`ip_id` order by cast(`traffic`.`created` as date) desc,count(`traffic`.`ip_id`) desc;

CREATE ALGORITHM=UNDEFINED SQL SECURITY DEFINER VIEW `uv_user` AS select `u`.`id` AS `id`,`u`.`username` AS `username`,`u`.`username_last_updated` AS `username_last_updated`,`u`.`secret` AS `secret`,`u`.`secret_last_updated` AS `secret_last_updated`,`u`.`date_created` AS `date_created`,`u`.`last_login` AS `last_login`,`u`.`access` AS `access`,`u`.`login_token` AS `login_token`,`u`.`login_token_exp` AS `login_token_exp`,`u`.`temp_secret` AS `temp_secret`,`u`.`temp_secret_exp` AS `temp_secret_exp`,`u`.`email` AS `email`,`u`.`email_last_updated` AS `email_last_updated`,`d`.`social_id` AS `discord_id`,`d`.`last_updated` AS `discord_last_updated`,`c`.`social_id` AS `chatango_id`,`c`.`last_updated` AS `chatango_last_updated`,`t`.`social_id` AS `twitter_id`,`t`.`last_updated` AS `twitter_last_updated` from (((`user` `u` left join `user_social` `d` on((select `social_type`.`id` from `social_type` where `social_type`.`name` = 'Discord') = `d`.`social_type_id` and `d`.`user_id` = `u`.`id`)) left join `user_social` `c` on((select `social_type`.`id` from `social_type` where `social_type`.`name` = 'Chatango') = `c`.`social_type_id` and `c`.`user_id` = `u`.`id`)) left join `user_social` `t` on((select `social_type`.`id` from `social_type` where `social_type`.`name` = 'Twitter') = `t`.`social_type_id` and `t`.`user_id` = `u`.`id`));
